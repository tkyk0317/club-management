//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2
use crate::db;
use crate::types::client::todo::UpdateTodo;
use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue;
use sea_orm::DbErr;
use sea_orm::QueryOrder;
use serde::{Deserialize, Serialize};
use std::vec::Vec;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "todo")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

pub async fn get() -> Vec<Model> {
    let db = db::establish_connection().await;
    Entity::find()
        .order_by_desc(Column::CreatedAt)
        .all(&db.unwrap())
        .await
        .unwrap()
}

pub async fn insert(model: &UpdateTodo) -> Result<Model, DbErr> {
    let todo = ActiveModel {
        id: ActiveValue::NotSet,
        content: ActiveValue::Set(model.content.clone()),
        ..Default::default()
    };
    let db = db::establish_connection().await;
    todo.insert(&db.unwrap()).await
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
